// Code your design here
// Code your design here
module controller (sel_in,sela,lda,upa,ldp,setp,eqz,done,start,clk);
  input clk,eqz,start;
  output reg sel_in,sela,lda,upa,ldp,setp,done;
  reg [2:0] state;
  parameter s0=3'b000, s1=3'b001, s2=3'b010, s3=3'b011, s4=3'b100;
    always @(posedge clk)
    begin 
      case (state)
        s0:if(start) state <=s1;
        s1:if(eqz) state<=s4;
        else state<=s2;
        s2:state<=s3;
        s3:state<=s2;
        s4:state <=s4;
        default: state<=s0;
      endcase
    end
        
  always@(state)
    begin
      case(state)
        s0 : begin #1  sel_in=0;sela=1;lda=0;upa=0;ldp=0;setp=0;done=0; end
        s1 : begin #1  lda=1; setp=1; end
        s2 : begin #1  sela=0; setp=0;lda=0;sel_in=1;ldp=1;end
        s3 : begin #1   upa=1;sela=1;sel_in=0;ldp=0;end
        s4 : begin #1  done=1; end
        default : begin #1 sel_in=0;sela=1;lda=0;upa=0;ldp=0;setp=0;done=0; end
      endcase
    end
endmodule  


module acc (dout,din1,din2,lda,upa,clk);
  input [15:0] din1,din2;
  input lda,clk,upa;
  output reg [15:0] dout;
  always @(posedge clk)
    if(lda) dout<=din1;
  else if (upa) dout<=din2;
endmodule

module sub (din2,dout);
  input [15:0] dout;
  output reg [15:0] din2;
  always @(*)
    din2=dout-1;
endmodule


module eqz (eqz,dout);
  input [15:0] dout;
  output eqz;
  assign eqz = (dout ==0);
endmodule



module pr (y,din1,ldp,selp,clk);
  input [15:0] din1;
  input ldp,selp,clk;
  output reg [15:0] y;
  always @(posedge clk)
    if (selp) y<=16'b0000000000000001;
  else if (ldp) y <=din1;
endmodule
  

module mux (din1,z,data_in,sel_in);
  input [15:0] z,data_in;
  input sel_in;
  output [15:0] din1;
  assign din1= sel_in?z:data_in;
endmodule


module aaa (x,dout,sela);
  input [15:0] dout;
  input sela;
  output [15:0] x;
  assign x= sela?(16'b0000000000000001):dout;
endmodule


module mul(z,x,y);
  input [15:0] x,y;
  output reg [15:0] z;
  always @(*)
    z=x*y;
endmodule



module fa_datapath (sel_in,sela,lda,upa,ldp,setp,eqz,clk);
  input sel_in,sela,lda,upa,ldp,setp,clk;
  input [15:0] data_in;
  output eqz ;
  wire [15:0] x,y,z,dout,din1,din2;
  assign din1= data_in;
  acc a(dout,din1,din2,lda,upa,clk);
  pr p(y,din1,ldp,setp,clk);
  aaa mu(x,dout,sela);
  mul  v(z,x,y);
  mux cc(din1,z,data_in,sel_in);
  sub ss(din2,dout);
  eqz vv(eqz,dout);
endmodule
   

// Code your testbench here
// or browse Examples
module fra_test;
  reg [15:0] data_in;
  reg clk,start;
  wire done,sel_in,sela,lda,upa,ldp,setp,eqz;
  fa_datapath dp(sel_in,sela,lda,upa,ldp,setp,eqz,clk);
  controller con(sel_in,sela,lda,upa,ldp,setp,eqz,done,start,clk);
  initial 
    begin
      clk = 1'b0;
      #3 start = 1'b1;
      #1000 $finish ;
    end
  always #5 clk =~clk;
  initial
    begin
      #17 data_in =5;
    end
  initial
    begin
      $monitor($time, " %d %b", dp.y, done);
      $dumpfile ("fra.vcd") ; $dumpvars (0, fra_test);
    end
endmodule